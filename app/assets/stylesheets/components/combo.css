/*
  COMBO BOX

  Usage

  .combo is exclusively used to style our custom tag.
  See app/helpers/combo_helper.rb for how this html is generated.

  <%= combo_tag 'sandbox', options=[], html_options={} %>
*/

.combo {
  /* variables */
  --menu-hover-background-color: var(--color-info-lightest);
  --menu-hover-color: var(--color-bright);

  position: relative;
}

.combo input[type="text"] {
  background: var(--color-input-background) url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' height='20' width='20' viewBox='0 0 20 20' aria-hidden='true' focusable='false' class='css-8mmkcg'%3E%3Cpath fill='%23b1bac3' d='M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z'%3E%3C/path%3E%3C/svg%3E") no-repeat right var(--s0) center/var(--s0) var(--s0);
  padding: var(--s-3) var(--s0) var(--s-3) var(--s-2);
}

.combo[disabled="disabled"] {
  pointer-events: none;
  opacity: 0.6;
}
.combo[disabled="disabled"]:hover {
  cursor: not-allowed;
}

.combo-options-wrapper {
  position: absolute;
  min-width: calc(var(--measure) / 1.5);
  width: 100%;
  z-index: var(--z1);
}

.combo-options-wrapper.right {
  right: 0;
}

.combo .combo-options {
  display: none;
  /* todo: constrain with JS if the bottom of the window would cut this off */
  max-height: 300px;
  overflow-y: scroll;
}

.combo.is\:open .combo-options {
  display: block;
}

.combo .combo-option {
  padding: var(--s-1);
  border-radius: var(--border-radius);
}

.combo .combo-option:hover, .combo .combo-option:focus {
  background: var(--menu-hover-background-color);
  color: var(--menu-hover-color);
  outline: 0;
}
